
  # defstruct blocks: [], current_block: [], symbol: :start

  # Parse result is an array of lines, including blank lines
  def ns1(line, state) do
    %{ state | blocks: state.blocks ++ [line]}
  end

  def parse1(text) do
      state = %{blocks: [], current_block: [], symbol: :start}
      String.split(text, ["\r", "\n" , "\r\n"]) |> Enum.map(fn(line) -> String.trim(line) end)
      |> Enum.reduce(state, fn(line, state) -> ns1(line, state) end)
    end



  #####################################

  def parse2(text) do
    state = %{blocks: [], current_block: [], symbol: :start}
    String.split(text, ["\r", "\n" , "\r\n"]) |> Enum.map(fn(line) -> String.trim(line) end)
    |> Enum.reduce(state, fn(line, state) -> ns2(line, state) end)
  end

  def type_of_line2(line) do
    if line == "" do
      :blank_line
    else
      :ordinary_line
    end
  end

  @doc """
  Parse text into parapgrahs

  symbols
    :start
    :blank_line
    :ordinary_line
    :paragraph
"""

  def ns2(line, state) do
    line_type = type_of_line2(line)
    symbol = state.symbol
    IO.inspect {symbol, line_type, state.current_block, state.blocks}

    output = cond do
     {symbol, line_type} == {:start, :ordinary_line} ->
       %{ state | current_block: state.current_block ++ [line], symbol: :paragraph}
     {symbol, line_type} == {:start, :blank_line} ->
       state

     # paragraph
     {:paragraph, :ordinary_line } == {symbol, line_type} ->
       %{ state | current_block: state.current_block ++ [line], symbol: :paragraph}
     {:paragraph, :blank_line } == {symbol, line_type} ->
       %{ state | symbol: :blank_line}

     # blank_line
     {:blank_line, :ordinary_line } == {symbol, line_type} ->
       %{ state | current_block: state.current_block ++ [line], symbol: :paragraph}
     {:blank_line, :blank_line } == {symbol, line_type} ->
       paragraph = state.current_block |> Enum.join("\n")
       blocks = state.blocks ++ [paragraph]
       %{ state | blocks: blocks, current_block: [], symbol: :start}

     true ->
        state
    end

  end



#####################################


  test "parser1" do
    output = Parser.parse1(@text1)
    IO.puts "-------------------------"
    IO.inspect output
  end

  test "parser2" do
    output = Parser.parse2(@text1)
    IO.puts "-------------------------"
    IO.inspect output
  end
